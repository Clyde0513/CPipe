#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <errno.h>

//File descriptor: 0 (stdin), 1 (stdout), 2 (stderr)
//fd[0]: read end of the pipe
//fds[1]: write end of the pipe

int main(int argc, char *argv[]){
  int pipe_fds[2];
  pid_t ret;
  
  if (argc == 1){
    return EINVAL;
  }
  //calling pipe first
  /*    if (pipe(pipe_fds) == -1){
    perror("pipe");
     exit(EXIT_FAILURE);
     }*/
  
  //then call fork()
  if ((ret = fork()) == -1){
    perror("fork");
    exit(EXIT_FAILURE);
  }
  
  if (argc == 2 && ret == 0){
    //first child
    dup2(pipe_fds[1], 1);
    close(pipe_fds[0]);
    close(pipe_fds[1]);
    if (execlp(argv[1], argv[1], NULL) == -1){
      perror(argv[1]);
      exit(EXIT_FAILURE);
    }    
  }

  if (argc == 3 && ret == 0){
    //first child

    dup2(pipe_fds[1],1); 
    close(pipe_fds[1]);
    close(pipe_fds[0]);
    if (execlp(argv[1], argv[1], NULL) == -1){
      perror(argv[1]);
      exit(EXIT_FAILURE);
    }
  
    //2nd child

    pid_t ret_2;

    if ((ret_2 = fork()) == -1){
      perror("fork");
      exit(EXIT_FAILURE);
    }

    if (argc == 3 && ret_2 == 0){
    
      dup2(pipe_fds[0],0); // redirect stdin to read end of the pipe
      close(pipe_fds[0]); //close the write end (right pipe) (0)
      close(pipe_fds[1]);
      if (execlp(argv[2], argv[2], NULL) == -1){
	perror(argv[2]);
	exit(EXIT_FAILURE);
      }
    }
    else if (ret_2 > 0) {
       //parent #2
      
      //calling 1st pipe first  
      /*if (pipe(pipe_fds) == -1){
	perror("pipe");
	exit(EXIT_FAILURE);
      }
      //then call 1st fork()
      
      if ((ret = fork()) == -1){
	perror("fork");
	exit(EXIT_FAILURE);
	}*/
      close(pipe_fds[1]);
      int pid = ret_2;
      int status = 0;
      waitpid(pid,&status,0);
      
      
    }
  }


  else{
    //parent
    
    //calling 1st pipe first  
    /*if (pipe(pipe_fds) == -1){
      perror("pipe");
      exit(EXIT_FAILURE);
    }
    //then call 1st fork()
    
    if ((ret = fork()) == -1){
      perror("fork");
      exit(EXIT_FAILURE);
      }*/
    close(pipe_fds[1]);
    int pid = ret;
    int status = 0;
    waitpid(pid,&status,0);



    
  }
    return EXIT_SUCCESS;
}
